#include "reference_calc.cpp"
#include "utils.h"

#define blockDimension 32

__global__
void gaussian_blur(const unsigned char* const inputChannel,
                   unsigned char* const outputChannel,
                   int numRows,
				   int numCols,
                   const float* const filter,
				   const int filterWidth)
{
    int x = (blockIdx.x * blockDimension) + threadIdx.x;
	int y = (blockIdx.y * blockDimension) + threadIdx.y;
	int filterRad = filterWidth/2;
	int i,j,k,l,m,p,q;
	float result = 0.0;
	if(x < numCols && y < numRows){
		i = y * numCols + x;
		for(j = -filterRad; j <= filterRad; j++){
			l = (y + j)*numCols;
			p = (j + filterRad)*filterWidth;
			for(k = -filterRad; k <= filterRad; k++){
				m = x + k;
				if(l < 0){
					l = 0;
				}else if((y + j) >= numRows){
					l = (numRows - 1)*numCols;
				}
				if(m < 0){
					m = 0;
				}else if(m >= numCols){
					m = numCols - 1;
				}
				result += filter[p + k + filterRad] * (float)inputChannel[l + m];
			}
		}
		outputChannel[i] = (int)(result);
	}
}

__global__
void separateChannels(const uchar4* const inputImageRGBA,
                      int numRows,
                      int numCols,
                      unsigned char* const redChannel,
                      unsigned char* const greenChannel,
                      unsigned char* const blueChannel)
{
	int x = (blockIdx.x * blockDimension) + threadIdx.x;
	int y = (blockIdx.y * blockDimension) + threadIdx.y;
	int i;
	if(x < numCols && y < numRows){
		i = y * numCols + x;
		redChannel[i] = inputImageRGBA[i].x;
		greenChannel[i] = inputImageRGBA[i].y;
		blueChannel[i] = inputImageRGBA[i].z;
	}
}

__global__
void recombineChannels(const unsigned char* const redChannel,
                       const unsigned char* const greenChannel,
                       const unsigned char* const blueChannel,
                       uchar4* const outputImageRGBA,
                       int numRows,
                       int numCols)
{
  const int2 thread_2D_pos = make_int2( blockIdx.x * blockDimension + threadIdx.x, blockIdx.y * blockDimension + threadIdx.y);

  const int thread_1D_pos = thread_2D_pos.y * numCols + thread_2D_pos.x;
  if (thread_2D_pos.x >= numCols || thread_2D_pos.y >= numRows)
    return;

  unsigned char red   = redChannel[thread_1D_pos];
  unsigned char green = greenChannel[thread_1D_pos];
  unsigned char blue  = blueChannel[thread_1D_pos];

  uchar4 outputPixel = make_uchar4(red, green, blue, 255);

  outputImageRGBA[thread_1D_pos] = outputPixel;
}

unsigned char *d_red, *d_green, *d_blue;
float         *d_filter;

void allocateMemoryAndCopyToGPU(const size_t numRowsImage, const size_t numColsImage,
                                const float* const h_filter, const size_t filterWidth)
{
  checkCudaErrors(cudaMalloc(&d_red,   sizeof(unsigned char) * numRowsImage * numColsImage));
  checkCudaErrors(cudaMalloc(&d_green, sizeof(unsigned char) * numRowsImage * numColsImage));
  checkCudaErrors(cudaMalloc(&d_blue,  sizeof(unsigned char) * numRowsImage * numColsImage));
  
	checkCudaErrors(cudaMalloc(&d_filter, sizeof(float) * filterWidth * filterWidth));
	checkCudaErrors(cudaMemcpy(d_filter, h_filter, sizeof(float) * filterWidth * filterWidth, cudaMemcpyHostToDevice));
}

void your_gaussian_blur(const uchar4 * const h_inputImageRGBA,
						uchar4 * const d_inputImageRGBA,
                        uchar4* const d_outputImageRGBA,
						const size_t numRows,
						const size_t numCols,
                        unsigned char *d_redBlurred, 
                        unsigned char *d_greenBlurred, 
                        unsigned char *d_blueBlurred,
                        const int filterWidth)
{
  const dim3 blockSize(blockDimension, blockDimension);
  const dim3 gridSize(1+((numCols-1)/blockDimension), 1+((numRows-1)/blockDimension));

  separateChannels<<<gridSize,blockSize>>>(d_inputImageRGBA, numRows, numCols, d_red, d_green, d_blue);
  cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());

  gaussian_blur<<<gridSize,blockSize>>>(d_red, d_redBlurred, numRows, numCols, d_filter, filterWidth);
  gaussian_blur<<<gridSize,blockSize>>>(d_green, d_greenBlurred, numRows, numCols, d_filter, filterWidth);
  gaussian_blur<<<gridSize,blockSize>>>(d_blue, d_blueBlurred, numRows, numCols, d_filter, filterWidth);

  cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());

  recombineChannels<<<gridSize, blockSize>>>(d_redBlurred,
                                             d_greenBlurred,
                                             d_blueBlurred,
                                             d_outputImageRGBA,
                                             numRows,
                                             numCols);
  cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());
}

void cleanup() {
  checkCudaErrors(cudaFree(d_red));
  checkCudaErrors(cudaFree(d_green));
  checkCudaErrors(cudaFree(d_blue));
  checkCudaErrors(cudaFree(d_filter));
}